/* Generated By:JJTree&JavaCC: Do not edit this line. MyParser.java */
        //required imports
        import java.io.*;
        import java.util.*;

        public class MyParser/*@bgen(jjtree)*/implements MyParserTreeConstants, MyParserConstants {/*@bgen(jjtree)*/
  protected static JJTMyParserState jjtree = new JJTMyParserState();
                public static Hashtable ST = new Hashtable();

                public static void main (String [] args) throws ParseException, FileNotFoundException {
                        String t1;
                        //STC t2;


                        if ( args.length < 1){
                                System.out.println("Cannot read from standard i/o....");
                                System.out.println("Please input file name....");
                                return;
                        }else if (args.length == 1){
                                try{
                                        MyParser tokeniser = new MyParser(new java.io.FileInputStream(args[0]));
                                        SimpleNode root = tokeniser.Prog(); //First node. Parse SS and store in "root".
                                        root.dump("");

                                //	PrintVisitor pv = new PrintVisitor();
                                //	root.jjtAccept(pv, null);

                                //	TypeCheckVisitor tc = new TypeCheckVisitor();
                                //	root.jjtAccept(tc, ST); //Symbol table being used with type table
// TODO Suceess message here? 		System.out.println("Success.");

                                }
                                catch (java.io.FileNotFoundException e) {
                                        System.err.println("File " + args[0] + " not found.");
                                        return;
                                }
                                catch(ParseException e) {
                                        System.out.println(e.getMessage());
                                        System.out.println("MyParser: Failure");
                                        System.out.println("MyParser: Encountered errors during parse");
                                }
                        }
                }

/* 
 ___________________________
|                           |
|	SECTION FOUR        |
|       GRAMMAR RULES       |
|___________________________|
*/
  static final public SimpleNode Prog() throws ParseException {
 /*@bgen(jjtree) Prog_Start */
  ASTProg_Start jjtn000 = new ASTProg_Start(JJTPROG_START);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      decl_list();
      func_list();
      main();
      jj_consume_token(0);
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                              {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decl_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECL_VARIABLE:
    case DECL_CONSTANT:
      decl();
      jj_consume_token(SEMICOLUMN);
      decl_list();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECL_VARIABLE:
      var_decl();
      break;
    case DECL_CONSTANT:
      const_decl();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
                                  /*@bgen(jjtree) variable_decl */
  ASTvariable_decl jjtn000 = new ASTvariable_decl(JJTVARIABLE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECL_VARIABLE);
      identifier(false);
      jj_consume_token(COLUMN);
      type();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void const_decl() throws ParseException {
                                    /*@bgen(jjtree) constant_decl */
  ASTconstant_decl jjtn000 = new ASTconstant_decl(JJTCONSTANT_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECL_CONSTANT);
      identifier(false);
      jj_consume_token(COLUMN);
      type();
      jj_consume_token(IS_VALUE);
      expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void type() throws ParseException {
                         /*@bgen(jjtree) VAL_TYPE */
                         ASTVAL_TYPE jjtn000 = new ASTVAL_TYPE(JJTVAL_TYPE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECL_INTEGER:
        t = jj_consume_token(DECL_INTEGER);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.value = t.image;
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.value = t.image;
        break;
      case VOID:
        t = jj_consume_token(VOID);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.value = t.image;
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void func_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECL_INTEGER:
    case VOID:
    case BOOLEAN:
      function();
      func_list();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void function() throws ParseException {
                            /*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      identifier(false);
      jj_consume_token(OPEN_BRACKET);
                                                  ASTPARAM_LIST jjtn001 = new ASTPARAM_LIST(JJTPARAM_LIST);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
      try {
        parameter_list();
      } catch (Throwable jjte001) {
                                                  if (jjtc001) {
                                                    jjtree.clearNodeScope(jjtn001);
                                                    jjtc001 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte001 instanceof RuntimeException) {
                                                    {if (true) throw (RuntimeException)jjte001;}
                                                  }
                                                  if (jjte001 instanceof ParseException) {
                                                    {if (true) throw (ParseException)jjte001;}
                                                  }
                                                  {if (true) throw (Error)jjte001;}
      } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
                                                  }
      }
      jj_consume_token(CLOSE_BRACKET);
      jj_consume_token(IS);
                                                                                                        ASTDECL_LIST jjtn002 = new ASTDECL_LIST(JJTDECL_LIST);
                                                                                                        boolean jjtc002 = true;
                                                                                                        jjtree.openNodeScope(jjtn002);
      try {
        decl_list();
      } catch (Throwable jjte002) {
                                                                                                        if (jjtc002) {
                                                                                                          jjtree.clearNodeScope(jjtn002);
                                                                                                          jjtc002 = false;
                                                                                                        } else {
                                                                                                          jjtree.popNode();
                                                                                                        }
                                                                                                        if (jjte002 instanceof RuntimeException) {
                                                                                                          {if (true) throw (RuntimeException)jjte002;}
                                                                                                        }
                                                                                                        if (jjte002 instanceof ParseException) {
                                                                                                          {if (true) throw (ParseException)jjte002;}
                                                                                                        }
                                                                                                        {if (true) throw (Error)jjte002;}
      } finally {
                                                                                                        if (jjtc002) {
                                                                                                          jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 0);
                                                                                                        }
      }
      jj_consume_token(BEGIN);
                                                                                                                                           ASTFUNCTION_CODE jjtn003 = new ASTFUNCTION_CODE(JJTFUNCTION_CODE);
                                                                                                                                           boolean jjtc003 = true;
                                                                                                                                           jjtree.openNodeScope(jjtn003);
      try {
        statement_block();
      } catch (Throwable jjte003) {
                                                                                                                                           if (jjtc003) {
                                                                                                                                             jjtree.clearNodeScope(jjtn003);
                                                                                                                                             jjtc003 = false;
                                                                                                                                           } else {
                                                                                                                                             jjtree.popNode();
                                                                                                                                           }
                                                                                                                                           if (jjte003 instanceof RuntimeException) {
                                                                                                                                             {if (true) throw (RuntimeException)jjte003;}
                                                                                                                                           }
                                                                                                                                           if (jjte003 instanceof ParseException) {
                                                                                                                                             {if (true) throw (ParseException)jjte003;}
                                                                                                                                           }
                                                                                                                                           {if (true) throw (Error)jjte003;}
      } finally {
                                                                                                                                           if (jjtc003) {
                                                                                                                                             jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 0);
                                                                                                                                           }
      }
      jj_consume_token(RETURN);
      jj_consume_token(OPEN_BRACKET);
                                                                                                                                                                                                        ASTRETURNS jjtn004 = new ASTRETURNS(JJTRETURNS);
                                                                                                                                                                                                        boolean jjtc004 = true;
                                                                                                                                                                                                        jjtree.openNodeScope(jjtn004);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IS_TRUE:
        case IS_FALSE:
        case OPEN_BRACKET:
        case MINUS_SIGN:
        case INTEGER:
        case ID:
          expression();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
      } catch (Throwable jjte004) {
                                                                                                                                                                                                        if (jjtc004) {
                                                                                                                                                                                                          jjtree.clearNodeScope(jjtn004);
                                                                                                                                                                                                          jjtc004 = false;
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                          jjtree.popNode();
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (jjte004 instanceof RuntimeException) {
                                                                                                                                                                                                          {if (true) throw (RuntimeException)jjte004;}
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (jjte004 instanceof ParseException) {
                                                                                                                                                                                                          {if (true) throw (ParseException)jjte004;}
                                                                                                                                                                                                        }
                                                                                                                                                                                                        {if (true) throw (Error)jjte004;}
      } finally {
                                                                                                                                                                                                        if (jjtc004) {
                                                                                                                                                                                                          jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 0);
                                                                                                                                                                                                        }
      }
      jj_consume_token(CLOSE_BRACKET);
      jj_consume_token(SEMICOLUMN);
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void parameter_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nemp_parameter_list();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void nemp_parameter_list() throws ParseException {
    identifier(false);
    jj_consume_token(COLUMN);
                                     ASTParameter jjtn001 = new ASTParameter(JJTPARAMETER);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
    try {
      type();
    } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte001;}
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte001;}
                                     }
                                     {if (true) throw (Error)jjte001;}
    } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nemp_parameter_list();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void main() throws ParseException {
                       /*@bgen(jjtree) #MAIN(true) */
  ASTMAIN jjtn000 = new ASTMAIN(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
                         ASTMAIN_DECLS jjtn001 = new ASTMAIN_DECLS(JJTMAIN_DECLS);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
        decl_list();
      } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
                         }
      }
                                                     ASTMAIN_CODE jjtn002 = new ASTMAIN_CODE(JJTMAIN_CODE);
                                                     boolean jjtc002 = true;
                                                     jjtree.openNodeScope(jjtn002);
      try {
        statement_block();
      } catch (Throwable jjte002) {
                                                     if (jjtc002) {
                                                       jjtree.clearNodeScope(jjtn002);
                                                       jjtc002 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte002 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte002;}
                                                     }
                                                     if (jjte002 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte002;}
                                                     }
                                                     {if (true) throw (Error)jjte002;}
      } finally {
                                                     if (jjtc002) {
                                                       jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 0);
                                                     }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void statement_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
    case IF:
    case WHILE:
    case ELSE:
    case DO_SKIP:
    case ID:
      statement();
      statement_block();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void statement() throws ParseException {
                          Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      identifier(false);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS_VALUE:
        jj_consume_token(IS_VALUE);
                              ASTASSIGN_OP jjtn001 = new ASTASSIGN_OP(JJTASSIGN_OP);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          expression();
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
        }
        break;
      case OPEN_BRACKET:
        jj_consume_token(OPEN_BRACKET);
        arg_list();
                                              ASTFUNC_CALL jjtn002 = new ASTFUNC_CALL(JJTFUNC_CALL);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(CLOSE_BRACKET);
        } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLUMN);
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      statement_block();
                                      ASTvoid jjtn003 = new ASTvoid(JJTVOID);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(END);
      } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003, true);
                                      }
      }
      break;
    case IF:
      jj_consume_token(IF);
                 ASTIF_CONDITION jjtn004 = new ASTIF_CONDITION(JJTIF_CONDITION);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
      try {
        condition();
      } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte004;}
                 }
                 if (jjte004 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte004;}
                 }
                 {if (true) throw (Error)jjte004;}
      } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 0);
                 }
      }
      jj_consume_token(BEGIN);
                                                       ASTIF_CODE jjtn005 = new ASTIF_CODE(JJTIF_CODE);
                                                       boolean jjtc005 = true;
                                                       jjtree.openNodeScope(jjtn005);
      try {
        statement_block();
      } catch (Throwable jjte005) {
                                                       if (jjtc005) {
                                                         jjtree.clearNodeScope(jjtn005);
                                                         jjtc005 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte005 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte005;}
                                                       }
                                                       if (jjte005 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte005;}
                                                       }
                                                       {if (true) throw (Error)jjte005;}
      } finally {
                                                       if (jjtc005) {
                                                         jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 0);
                                                       }
      }
                                                                                      ASTIF jjtn006 = new ASTIF(JJTIF);
                                                                                      boolean jjtc006 = true;
                                                                                      jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(END);
      } finally {
                                                                                      if (jjtc006) {
                                                                                        jjtree.closeNodeScope(jjtn006,  2);
                                                                                      }
      }
      break;
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(BEGIN);
                           ASTELSE_CODE jjtn007 = new ASTELSE_CODE(JJTELSE_CODE);
                           boolean jjtc007 = true;
                           jjtree.openNodeScope(jjtn007);
      try {
        statement_block();
      } catch (Throwable jjte007) {
                           if (jjtc007) {
                             jjtree.clearNodeScope(jjtn007);
                             jjtc007 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte007 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte007;}
                           }
                           if (jjte007 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte007;}
                           }
                           {if (true) throw (Error)jjte007;}
      } finally {
                           if (jjtc007) {
                             jjtree.closeNodeScope(jjtn007, jjtree.nodeArity() > 0);
                           }
      }
                                                            ASTELSE jjtn008 = new ASTELSE(JJTELSE);
                                                            boolean jjtc008 = true;
                                                            jjtree.openNodeScope(jjtn008);
      try {
        jj_consume_token(END);
      } finally {
                                                            if (jjtc008) {
                                                              jjtree.closeNodeScope(jjtn008,  1);
                                                            }
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
                    ASTWHILE_CONDITION jjtn009 = new ASTWHILE_CONDITION(JJTWHILE_CONDITION);
                    boolean jjtc009 = true;
                    jjtree.openNodeScope(jjtn009);
      try {
        condition();
      } catch (Throwable jjte009) {
                    if (jjtc009) {
                      jjtree.clearNodeScope(jjtn009);
                      jjtc009 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte009 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte009;}
                    }
                    if (jjte009 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte009;}
                    }
                    {if (true) throw (Error)jjte009;}
      } finally {
                    if (jjtc009) {
                      jjtree.closeNodeScope(jjtn009, jjtree.nodeArity() > 0);
                    }
      }
      jj_consume_token(BEGIN);
                                                             ASTWHILE_CODE jjtn010 = new ASTWHILE_CODE(JJTWHILE_CODE);
                                                             boolean jjtc010 = true;
                                                             jjtree.openNodeScope(jjtn010);
      try {
        statement_block();
      } catch (Throwable jjte010) {
                                                             if (jjtc010) {
                                                               jjtree.clearNodeScope(jjtn010);
                                                               jjtc010 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte010 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte010;}
                                                             }
                                                             if (jjte010 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte010;}
                                                             }
                                                             {if (true) throw (Error)jjte010;}
      } finally {
                                                             if (jjtc010) {
                                                               jjtree.closeNodeScope(jjtn010, jjtree.nodeArity() > 0);
                                                             }
      }
                                                                                               ASTWHILE jjtn011 = new ASTWHILE(JJTWHILE);
                                                                                               boolean jjtc011 = true;
                                                                                               jjtree.openNodeScope(jjtn011);
      try {
        jj_consume_token(END);
      } finally {
                                                                                               if (jjtc011) {
                                                                                                 jjtree.closeNodeScope(jjtn011,  2);
                                                                                               }
      }
      break;
    case DO_SKIP:
      jj_consume_token(DO_SKIP);
                      ASTSKIP jjtn012 = new ASTSKIP(JJTSKIP);
                      boolean jjtc012 = true;
                      jjtree.openNodeScope(jjtn012);
      try {
        jj_consume_token(SEMICOLUMN);
      } finally {
                      if (jjtc012) {
                        jjtree.closeNodeScope(jjtn012, true);
                      }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS_TRUE:
    case IS_FALSE:
    case INTEGER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        integer();
        break;
      case IS_TRUE:
        is_true();
        break;
      case IS_FALSE:
        is_false();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
        case MINUS_SIGN:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
                                          ASTPLUS_OP jjtn001 = new ASTPLUS_OP(JJTPLUS_OP);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(PLUS_SIGN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IS_TRUE:
            case IS_FALSE:
            case MINUS_SIGN:
            case INTEGER:
            case ID:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MINUS_SIGN:
              case ID:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MINUS_SIGN:
                  minus_identifier();
                  break;
                case ID:
                  identifier(false);
                  break;
                default:
                  jj_la1[12] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case OPEN_BRACKET:
                  jj_consume_token(OPEN_BRACKET);
                  arg_list();
                  jj_consume_token(CLOSE_BRACKET);
                  break;
                default:
                  jj_la1[13] = jj_gen;
                  ;
                }
                break;
              case INTEGER:
                integer();
                break;
              case IS_TRUE:
                is_true();
                break;
              case IS_FALSE:
                is_false();
                break;
              default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            case OPEN_BRACKET:
              jj_consume_token(OPEN_BRACKET);
              expression();
              jj_consume_token(CLOSE_BRACKET);
              break;
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } catch (Throwable jjte001) {
                                          if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte001;}
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte001;}
                                          }
                                          {if (true) throw (Error)jjte001;}
          } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
          }
          break;
        case MINUS_SIGN:
                                          ASTSUBTRACT_OP jjtn002 = new ASTSUBTRACT_OP(JJTSUBTRACT_OP);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(MINUS_SIGN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IS_TRUE:
            case IS_FALSE:
            case MINUS_SIGN:
            case INTEGER:
            case ID:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case MINUS_SIGN:
              case ID:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case MINUS_SIGN:
                  minus_identifier();
                  break;
                case ID:
                  identifier(false);
                  break;
                default:
                  jj_la1[16] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case OPEN_BRACKET:
                  jj_consume_token(OPEN_BRACKET);
                  arg_list();
                  jj_consume_token(CLOSE_BRACKET);
                  break;
                default:
                  jj_la1[17] = jj_gen;
                  ;
                }
                break;
              case INTEGER:
                integer();
                break;
              case IS_TRUE:
                is_true();
                break;
              case IS_FALSE:
                is_false();
                break;
              default:
                jj_la1[18] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            case OPEN_BRACKET:
              jj_consume_token(OPEN_BRACKET);
              expression();
              jj_consume_token(CLOSE_BRACKET);
              break;
            default:
              jj_la1[19] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } catch (Throwable jjte002) {
                                          if (jjtc002) {
                                            jjtree.clearNodeScope(jjtn002);
                                            jjtc002 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte002 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte002;}
                                          }
                                          if (jjte002 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte002;}
                                          }
                                          {if (true) throw (Error)jjte002;}
          } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
          }
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case MINUS_SIGN:
      minus_identifier();
      break;
    case ID:
      identifier(false);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS_TRUE:
      case IS_FALSE:
      case OPEN_BRACKET:
      case PLUS_SIGN:
      case MINUS_SIGN:
      case INTEGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_BRACKET:
          jj_consume_token(OPEN_BRACKET);
          arg_list();
          jj_consume_token(CLOSE_BRACKET);
          break;
        case IS_TRUE:
        case IS_FALSE:
        case PLUS_SIGN:
        case MINUS_SIGN:
        case INTEGER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IS_TRUE:
          case IS_FALSE:
          case INTEGER:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER:
              integer();
              break;
            case IS_TRUE:
              is_true();
              break;
            case IS_FALSE:
              is_false();
              break;
            default:
              jj_la1[21] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MINUS_SIGN:
                                    ASTSUBTRACT_OP jjtn003 = new ASTSUBTRACT_OP(JJTSUBTRACT_OP);
                                    boolean jjtc003 = true;
                                    jjtree.openNodeScope(jjtn003);
              try {
                jj_consume_token(MINUS_SIGN);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case IS_TRUE:
                case IS_FALSE:
                case MINUS_SIGN:
                case INTEGER:
                case ID:
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case MINUS_SIGN:
                    minus_identifier();
                    break;
                  case ID:
                    identifier(false);
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case OPEN_BRACKET:
                      jj_consume_token(OPEN_BRACKET);
                      arg_list();
                      jj_consume_token(CLOSE_BRACKET);
                      break;
                    default:
                      jj_la1[23] = jj_gen;
                      ;
                    }
                    break;
                  case INTEGER:
                    integer();
                    break;
                  case IS_TRUE:
                    is_true();
                    break;
                  case IS_FALSE:
                    is_false();
                    break;
                  default:
                    jj_la1[24] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                case OPEN_BRACKET:
                  jj_consume_token(OPEN_BRACKET);
                  expression();
                  jj_consume_token(CLOSE_BRACKET);
                  break;
                default:
                  jj_la1[25] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } catch (Throwable jjte003) {
                                    if (jjtc003) {
                                      jjtree.clearNodeScope(jjtn003);
                                      jjtc003 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte003 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte003;}
                                    }
                                    if (jjte003 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte003;}
                                    }
                                    {if (true) throw (Error)jjte003;}
              } finally {
                                    if (jjtc003) {
                                      jjtree.closeNodeScope(jjtn003,  2);
                                    }
              }
              break;
            case PLUS_SIGN:
                                    ASTPLUS_OP jjtn004 = new ASTPLUS_OP(JJTPLUS_OP);
                                    boolean jjtc004 = true;
                                    jjtree.openNodeScope(jjtn004);
              try {
                jj_consume_token(PLUS_SIGN);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case IS_TRUE:
                case IS_FALSE:
                case MINUS_SIGN:
                case INTEGER:
                case ID:
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case MINUS_SIGN:
                  case ID:
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case MINUS_SIGN:
                      minus_identifier();
                      break;
                    case ID:
                      identifier(false);
                      break;
                    default:
                      jj_la1[26] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case OPEN_BRACKET:
                      jj_consume_token(OPEN_BRACKET);
                      arg_list();
                      jj_consume_token(CLOSE_BRACKET);
                      break;
                    default:
                      jj_la1[27] = jj_gen;
                      ;
                    }
                    break;
                  case INTEGER:
                    integer();
                    break;
                  case IS_TRUE:
                    is_true();
                    break;
                  case IS_FALSE:
                    is_false();
                    break;
                  default:
                    jj_la1[28] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                case OPEN_BRACKET:
                  jj_consume_token(OPEN_BRACKET);
                  expression();
                  jj_consume_token(CLOSE_BRACKET);
                  break;
                default:
                  jj_la1[29] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } catch (Throwable jjte004) {
                                    if (jjtc004) {
                                      jjtree.clearNodeScope(jjtn004);
                                      jjtc004 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte004 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte004;}
                                    }
                                    if (jjte004 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte004;}
                                    }
                                    {if (true) throw (Error)jjte004;}
              } finally {
                                    if (jjtc004) {
                                      jjtree.closeNodeScope(jjtn004,  2);
                                    }
              }
              break;
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PLUS_SIGN:
            case MINUS_SIGN:
              ;
              break;
            default:
              jj_la1[31] = jj_gen;
              break label_2;
            }
          }
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      break;
    case OPEN_BRACKET:
      jj_consume_token(OPEN_BRACKET);
      expression();
      jj_consume_token(CLOSE_BRACKET);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void binary_arith_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
          ASTPLUS_OP jjtn001 = new ASTPLUS_OP(JJTPLUS_OP);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(PLUS_SIGN);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
      break;
    case MINUS_SIGN:
            ASTSUBTRACT_OP jjtn002 = new ASTSUBTRACT_OP(JJTSUBTRACT_OP);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(MINUS_SIGN);
      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDA:
      jj_consume_token(TILDA);
                                  ASTNEGATION jjtn001 = new ASTNEGATION(JJTNEGATION);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
      try {
        condition();
      } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
                                  }
      }
      break;
    default:
      jj_la1[37] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(OPEN_BRACKET);
        condition();
        jj_consume_token(CLOSE_BRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IS_TRUE:
        case IS_FALSE:
        case OPEN_BRACKET:
        case MINUS_SIGN:
        case INTEGER:
        case ID:
          expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUALS_SIGN:
            jj_consume_token(EQUALS_SIGN);
                                                ASTEQUAL jjtn002 = new ASTEQUAL(JJTEQUAL);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
            try {
              expression();
            } catch (Throwable jjte002) {
                                                if (jjtc002) {
                                                  jjtree.clearNodeScope(jjtn002);
                                                  jjtc002 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte002 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte002;}
                                                }
                                                if (jjte002 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte002;}
                                                }
                                                {if (true) throw (Error)jjte002;}
            } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                }
            }
            break;
          case NEGATION_EQUALS:
            jj_consume_token(NEGATION_EQUALS);
                                                      ASTNOT_EQUAL jjtn003 = new ASTNOT_EQUAL(JJTNOT_EQUAL);
                                                      boolean jjtc003 = true;
                                                      jjtree.openNodeScope(jjtn003);
            try {
              expression();
            } catch (Throwable jjte003) {
                                                      if (jjtc003) {
                                                        jjtree.clearNodeScope(jjtn003);
                                                        jjtc003 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte003 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte003;}
                                                      }
                                                      if (jjte003 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte003;}
                                                      }
                                                      {if (true) throw (Error)jjte003;}
            } finally {
                                                      if (jjtc003) {
                                                        jjtree.closeNodeScope(jjtn003,  2);
                                                      }
            }
            break;
          case LESS_THAN:
            jj_consume_token(LESS_THAN);
                                                ASTLESS_THAN jjtn004 = new ASTLESS_THAN(JJTLESS_THAN);
                                                boolean jjtc004 = true;
                                                jjtree.openNodeScope(jjtn004);
            try {
              expression();
            } catch (Throwable jjte004) {
                                                if (jjtc004) {
                                                  jjtree.clearNodeScope(jjtn004);
                                                  jjtc004 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte004 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte004;}
                                                }
                                                if (jjte004 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte004;}
                                                }
                                                {if (true) throw (Error)jjte004;}
            } finally {
                                                if (jjtc004) {
                                                  jjtree.closeNodeScope(jjtn004,  2);
                                                }
            }
            break;
          case EQUAL_LESS_THAN:
            jj_consume_token(EQUAL_LESS_THAN);
                                                      ASTEQ_LESS_THAN jjtn005 = new ASTEQ_LESS_THAN(JJTEQ_LESS_THAN);
                                                      boolean jjtc005 = true;
                                                      jjtree.openNodeScope(jjtn005);
            try {
              expression();
            } catch (Throwable jjte005) {
                                                      if (jjtc005) {
                                                        jjtree.clearNodeScope(jjtn005);
                                                        jjtc005 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte005 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte005;}
                                                      }
                                                      if (jjte005 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte005;}
                                                      }
                                                      {if (true) throw (Error)jjte005;}
            } finally {
                                                      if (jjtc005) {
                                                        jjtree.closeNodeScope(jjtn005,  2);
                                                      }
            }
            break;
          case GREATER_THAN:
            jj_consume_token(GREATER_THAN);
                                                   ASTGREATER_THAN jjtn006 = new ASTGREATER_THAN(JJTGREATER_THAN);
                                                   boolean jjtc006 = true;
                                                   jjtree.openNodeScope(jjtn006);
            try {
              expression();
            } catch (Throwable jjte006) {
                                                   if (jjtc006) {
                                                     jjtree.clearNodeScope(jjtn006);
                                                     jjtc006 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte006 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte006;}
                                                   }
                                                   if (jjte006 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte006;}
                                                   }
                                                   {if (true) throw (Error)jjte006;}
            } finally {
                                                   if (jjtc006) {
                                                     jjtree.closeNodeScope(jjtn006,  2);
                                                   }
            }
            break;
          case EQUAL_GREATER_THAN:
            jj_consume_token(EQUAL_GREATER_THAN);
                                                         ASTEQ_GREATER_THAN jjtn007 = new ASTEQ_GREATER_THAN(JJTEQ_GREATER_THAN);
                                                         boolean jjtc007 = true;
                                                         jjtree.openNodeScope(jjtn007);
            try {
              expression();
            } catch (Throwable jjte007) {
                                                         if (jjtc007) {
                                                           jjtree.clearNodeScope(jjtn007);
                                                           jjtc007 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte007 instanceof RuntimeException) {
                                                           {if (true) throw (RuntimeException)jjte007;}
                                                         }
                                                         if (jjte007 instanceof ParseException) {
                                                           {if (true) throw (ParseException)jjte007;}
                                                         }
                                                         {if (true) throw (Error)jjte007;}
            } finally {
                                                         if (jjtc007) {
                                                           jjtree.closeNodeScope(jjtn007,  2);
                                                         }
            }
            break;
          default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    if (jj_2_2(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_SIGN:
        jj_consume_token(OR_SIGN);
                                    ASTOR jjtn008 = new ASTOR(JJTOR);
                                    boolean jjtc008 = true;
                                    jjtree.openNodeScope(jjtn008);
        try {
          condition();
        } catch (Throwable jjte008) {
                                    if (jjtc008) {
                                      jjtree.clearNodeScope(jjtn008);
                                      jjtc008 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte008 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte008;}
                                    }
                                    if (jjte008 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte008;}
                                    }
                                    {if (true) throw (Error)jjte008;}
        } finally {
                                    if (jjtc008) {
                                      jjtree.closeNodeScope(jjtn008,  2);
                                    }
        }
        break;
      case AND_SIGN:
        jj_consume_token(AND_SIGN);
                                       ASTAND jjtn009 = new ASTAND(JJTAND);
                                       boolean jjtc009 = true;
                                       jjtree.openNodeScope(jjtn009);
        try {
          condition();
        } catch (Throwable jjte009) {
                                       if (jjtc009) {
                                         jjtree.clearNodeScope(jjtn009);
                                         jjtc009 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte009 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte009;}
                                       }
                                       if (jjte009 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte009;}
                                       }
                                       {if (true) throw (Error)jjte009;}
        } finally {
                                       if (jjtc009) {
                                         jjtree.closeNodeScope(jjtn009,  2);
                                       }
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
  }

  static final public void arg_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nemp_arg_list();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  static final public void nemp_arg_list() throws ParseException {
                                  /*@bgen(jjtree) ARG_LIST */
  ASTARG_LIST jjtn000 = new ASTARG_LIST(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier(false);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        identifier(false);
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public String identifier(Boolean isMinus) throws ParseException {
                                         /*@bgen(jjtree) ID */
                                         ASTID jjtn000 = new ASTID(JJTID);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                String image = t.image;
                if (isMinus)
                        image = "-" + t.image;
                jjtn000.value = image;
                {if (true) return image;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String integer() throws ParseException {
                        /*@bgen(jjtree) INT */
                        ASTINT jjtn000 = new ASTINT(JJTINT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String is_true() throws ParseException {
                            /*@bgen(jjtree) IS_TRUE */
                            ASTIS_TRUE jjtn000 = new ASTIS_TRUE(JJTIS_TRUE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IS_TRUE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String is_false() throws ParseException {
                              /*@bgen(jjtree) IS_FALSE */
                              ASTIS_FALSE jjtn000 = new ASTIS_FALSE(JJTIS_FALSE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IS_FALSE);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void minus_identifier() throws ParseException {
                                Token t;
    t = jj_consume_token(MINUS_SIGN);
    identifier(true);

  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(PLUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(TILDA)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(PLUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(IS_FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(IS_TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(EQUAL_GREATER_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(AND_SIGN)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(EQUAL_LESS_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(NEGATION_EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(OR_SIGN)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(EQUALS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa000,0xa000,0x214000,0x214000,0x80180000,0x0,0x8000000,0x41c80,0xc0000000,0x41c80,0x180000,0x0,0x0,0x80000000,0x180000,0x80180000,0x0,0x80000000,0x180000,0x80180000,0x0,0x180000,0x180000,0x80000000,0x180000,0x80180000,0x0,0x80000000,0x180000,0x80180000,0x0,0x0,0x80180000,0x80180000,0x80180000,0x0,0x0,0x0,0x80180000,0x0,0x0,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x5004,0x4000,0x0,0x4000,0x0,0x4000,0x1000,0x6,0x4004,0x0,0x5004,0x5004,0x4004,0x0,0x5004,0x5004,0x6,0x1000,0x1000,0x0,0x5004,0x5004,0x4004,0x0,0x5004,0x5004,0x6,0x6,0x1006,0x1006,0x5004,0x6,0xfc0,0x8,0x5004,0x30,0x4000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
