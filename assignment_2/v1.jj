/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. v1.jj */
/*@egen*//*ASSIGNMENT 2*/

/* 
 ___________________________
|                           |
|	SECTION ONE         |
|    	  OPTIONS           |
|___________________________|

*/

options { 
	  JAVA_UNICODE_ESCAPE = true;
	  IGNORE_CASE = true;
	               
                         
	}
/* 
 ___________________________
|                           |
|	SECTION TWO         |
|    	 USER-CODE          |
|___________________________|

*/
PARSER_BEGIN(MyParser)

	//required imports
	import java.io.*;
	import java.util.*;

	public class MyParser/*@bgen(jjtree)*/implements MyParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMyParserState jjtree = new JJTMyParserState();

/*@egen*/

		public static Hashtable ST = new Hashtable(); 

		public static void main (String [] args) throws ParseException, FileNotFoundException { 
			String t1; 
			//STC t2;


			if ( args.length < 1){
				System.out.println("Cannot read from standard i/o....");
				System.out.println("Please input file name....");
				return;
			}else if (args.length == 1){
				try{
					MyParser tokeniser = new MyParser(new java.io.FileInputStream(args[0]));
					SimpleNode root = tokeniser.Prog(); //First node. Parse SS and store in "root".
					root.dump("");
					
				//	PrintVisitor pv = new PrintVisitor();
			        //	root.jjtAccept(pv, null);
					
				//	TypeCheckVisitor tc = new TypeCheckVisitor();
				//	root.jjtAccept(tc, ST); //Symbol table being used with type table
// TODO Suceess message here? 		System.out.println("Success.");

				} 
				catch (java.io.FileNotFoundException e) {
					System.err.println("File " + args[0] + " not found.");
					return;
				}
				catch(ParseException e) {
					System.out.println(e.getMessage());
					System.out.println("MyParser: Failure");
					System.out.println("MyParser: Encountered errors during parse");
				}
			}
		}
	}
PARSER_END(MyParser) 

/* 
 ___________________________
|                           |
|      SECTION THREE        |
|     TOKEN-DEFINITONS      |
|___________________________|

*/

TOKEN_MGR_DECLS: {
	static int commentNesting = 0;
}

SKIP : /* COMMENTS */ {
	"/*" { commentNesting++;
	       System.out.println("Comment"); } : IN_COMMENT
     | < SINGLE_COMMENT:  "//" (~["\n"])+ >  { System.out.println("One line comment found"); }
}

<IN_COMMENT> SKIP : {
	"/*" { commentNesting++; }
     |  "*/" { commentNesting--;
		if (commentNesting == 0){
			System.out.println("Comments closed");
			SwitchTo(DEFAULT);
		}
		else{
			System.out.println("Comments not shut yet");
			System.out.println("Comments left: " + Integer.toString(commentNesting));
		}
	     }
     | <~[]>
}

TOKEN : /*---RESERVED WORDS---*/ {
	< MAIN : "main" >
      | < BEGIN : "begin" >
      | < END : "end" >
      | < RETURN : "return" >
      | < IF : "if" >
      | < WHILE : "while" >
      | < ELSE : "else" >
      | < DECL_VARIABLE : "variable" >
      | < DECL_INTEGER : "integer" >
      | < DECL_CONSTANT : "constant" >
      | < VOID : "void" >
      | < IS : "is" >
      | < DO_SKIP : "skip" >
      | < IS_TRUE : "true" >
      | < IS_FALSE : "false" >
      | < BOOLEAN : "boolean" >
      /*| < : "" >*/
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

TOKEN : /*---TOKENS---*/ {	
	< COMMA : "," >
      | < SEMICOLUMN : ";" >	
      | < COLUMN : ":" >	
      | < IS_VALUE: ":=" >	
      | < OPEN_BRACKET : "(" >	
      | < CLOSE_BRACKET : ")" >	
      | < PLUS_SIGN : "+" >	
      | < MINUS_SIGN : "-" >	
      | < TILDA : "~" >	
      | < OR_SIGN : "|" >	
      | < AND_SIGN : "&" >	
      | < EQUALS_SIGN : "=" >	
      | < NEGATION_EQUALS : "!=" >	
      | < LESS_THAN: "<" >	
      | < EQUAL_LESS_THAN : "<=" >	
      | < GREATER_THAN : ">" >	
      | < EQUAL_GREATER_THAN: ">=" >	

}

TOKEN : /*---IDENTIFIERS---*/ {
        < INTEGER : "0" | ("-")? (["1" - "9"])(["0" - "9"])*>
	| < #DIGIT : ["0" - "9"] >
	| < ID : <LETTER>("_"|<LETTER>|<DIGIT>)*>
	| < #LETTER : ["a" - "z", "A" - "Z"] >
}
/* 
 ___________________________
|                           |
|	SECTION FOUR        |
|       GRAMMAR RULES       |
|___________________________|
*/

SimpleNode Prog()          :   
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	decl_list() func_list() main() <EOF>/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void decl_list()       :
{}
{
	(/*@bgen(jjtree) DECL_LIST */
          {
            ASTDECL_LIST jjtn001 = new ASTDECL_LIST(JJTDECL_LIST);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/           decl() <SEMICOLUMN> decl_list() )?
}

void decl()       : //Can skip this
{}
{
	var_decl() 
	| const_decl()
}

void var_decl()           : {/*@bgen(jjtree) var_decl */
  ASTvar_decl jjtn000 = new ASTvar_decl(JJTVAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) var_decl */
        try {
/*@egen*/
	<DECL_VARIABLE> identifier() <COLUMN> type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	
void const_decl()             : {/*@bgen(jjtree) const_decl */
  ASTconst_decl jjtn000 = new ASTconst_decl(JJTCONST_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) const_decl */
        try {
/*@egen*/
	<DECL_CONSTANT> identifier() <COLUMN> type() <IS_VALUE> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void type()       : {Token t;}
{
	t = <DECL_INTEGER>/*@bgen(jjtree) Int */
                           {
                             ASTInt jjtn001 = new ASTInt(JJTINT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                           }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                             }
                           }
/*@egen*/     
	| t = <BOOLEAN>/*@bgen(jjtree) Bool */
                        {
                          ASTBool jjtn002 = new ASTBool(JJTBOOL);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                        }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/      
	| t = <VOID>/*@bgen(jjtree) Void */
                     {
                       ASTVoid jjtn003 = new ASTVoid(JJTVOID);
                       boolean jjtc003 = true;
                       jjtree.openNodeScope(jjtn003);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn003, true);
                       jjtc003 = false;
                     }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc003) {
                         jjtree.closeNodeScope(jjtn003, true);
                       }
                     }
/*@egen*/       //TODO semantics func type and return matching
}

void func_list()       : {}
{
	(function() func_list())?	
}

void function()           : {/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	type() identifier() <OPEN_BRACKET> parameter_list() <CLOSE_BRACKET> <IS> decl_list() <BEGIN> statement_block() <RETURN> <OPEN_BRACKET> (expression())? <CLOSE_BRACKET> <SEMICOLUMN><END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void parameter_list()       : {}
{
	(nemp_parameter_list())?
}

void nemp_parameter_list()        :  {/*@bgen(jjtree) Param */
  ASTParam jjtn000 = new ASTParam(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Param */
        try {
/*@egen*/
	identifier() <COLUMN> type() (<COMMA> nemp_parameter_list())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void main()       : {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
        try {
/*@egen*/
	<MAIN> <BEGIN> decl_list() statement_block() <END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_block()      : {}
{
	( statement() statement_block() )?
}

void statement()       : {Token t;}
{
	identifier() ( <IS_VALUE> expression() | <OPEN_BRACKET> arg_list() <CLOSE_BRACKET> ) <SEMICOLUMN>/*@bgen(jjtree) ASSIGN_OP */
                                                                                                          {
                                                                                                            ASTASSIGN_OP jjtn001 = new ASTASSIGN_OP(JJTASSIGN_OP);
                                                                                                            boolean jjtc001 = true;
                                                                                                            jjtree.openNodeScope(jjtn001);
                                                                                                          }
                                                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                          {
                                                                                                            jjtree.closeNodeScope(jjtn001, true);
                                                                                                            jjtc001 = false;
                                                                                                          }
/*@egen*/ {}/*@bgen(jjtree)*/
                                                                                                          } finally {
                                                                                                            if (jjtc001) {
                                                                                                              jjtree.closeNodeScope(jjtn001, true);
                                                                                                            }
                                                                                                          }
/*@egen*/           
	| <BEGIN> statement_block() <END> 
	| <IF> condition() <BEGIN> statement_block() <END> 
	| <ELSE> <BEGIN> statement_block() <END> 
	| <WHILE> condition() <BEGIN> statement_block() <END> 
	| <DO_SKIP> <SEMICOLUMN> //TODO what is the purpose of skip? How relevant to semantics?
}

void expression(): {/*@bgen(jjtree) expression */
  ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expression */
         try {
/*@egen*/
	 (
                (
                        <INTEGER> | <IS_TRUE> | <IS_FALSE>
                )
		
                (
                        binary_arith_op()
                        ((
                                (<MINUS_SIGN>)? identifier() (<OPEN_BRACKET> arg_list() <CLOSE_BRACKET>)?| <INTEGER> | <IS_TRUE> | <IS_FALSE>
                        )
			| <OPEN_BRACKET> expression() <CLOSE_BRACKET>)
                )*
        )
	|   (<MINUS_SIGN>)? identifier() ( 
		(//start OR 
			(
				<OPEN_BRACKET> arg_list() <CLOSE_BRACKET>
			) 
			| 
			( 
				<INTEGER> | <IS_TRUE> | <IS_FALSE> 
				)? 
				( binary_arith_op() 
					(( 
						(<MINUS_SIGN>)? identifier() (<OPEN_BRACKET> arg_list() <CLOSE_BRACKET>)? | <INTEGER> | <IS_TRUE> | <IS_FALSE> 
					) 
					| <OPEN_BRACKET> expression() <CLOSE_BRACKET>
					)
				)+ 
			) 
		 )? 
	| <OPEN_BRACKET> expression() <CLOSE_BRACKET>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/ 
}

void binary_arith_op()       : {} //TODO string - string valid?
{
        <PLUS_SIGN> 
        | <MINUS_SIGN> 
}    

void condition(): {/*@bgen(jjtree) condition */
  ASTcondition jjtn000 = new ASTcondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condition */
        try {
/*@egen*/
        (
                (//begin OR 
                        <TILDA> condition()
                )
                |
                LOOKAHEAD(3)(
                        <OPEN_BRACKET> /*--going to cause conflict with expression last choice if no lookahead--*/ condition() <CLOSE_BRACKET>
                )
                |
                (
                        expression() comp_op() expression()
                ) //end OR
        )
        (
                LOOKAHEAD(2)( <OR_SIGN> | <AND_SIGN> ) 
                condition()
        )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void comp_op()       : {} //TODO string less than string valid? 
{
	<EQUALS_SIGN> 
	| <NEGATION_EQUALS> 
	| <LESS_THAN>
	| <EQUAL_LESS_THAN>
	| <GREATER_THAN>
	| <EQUAL_GREATER_THAN>
}

void arg_list()       : {}
{
	(nemp_arg_list())?
}

void nemp_arg_list()           : {/*@bgen(jjtree) arg_list */
  ASTarg_list jjtn000 = new ASTarg_list(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) arg_list */
         try {
/*@egen*/
	 (identifier() (<COMMA> identifier())* )/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/ 
}
String identifier()    : {/*@bgen(jjtree) ID */
                          ASTID jjtn000 = new ASTID(JJTID);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
        try {
/*@egen*/
	t = <ID>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {System.out.println("Hit ID method" + "\njjtThis.value = " + jjtn000.value + "\nt.image = "  + t.image); jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ //generated non-terminal ID  
}
