/*ASSIGNMENT 2*/

/* 
 ___________________________
|                           |
|	SECTION ONE         |
|    	  OPTIONS           |
|___________________________|

*/

options { 
	  JAVA_UNICODE_ESCAPE = true;
	  IGNORE_CASE = true;
	  MULTI = true;
          VISITOR = true;
	}
/* 
 ___________________________
|                           |
|	SECTION TWO         |
|    	 USER-CODE          |
|___________________________|

*/
PARSER_BEGIN(MyParser)

	//required imports
	import java.io.*;
	import java.util.*;

	public class MyParser{

		public static String scope = "global"; 
		public static int ifID = 0;
		public static int elseID = 0;
		public static int whileID = 0;
		public static SymbolTable STC = new SymbolTable(); 

		public static void main (String [] args) throws ParseException, FileNotFoundException { 


			if ( args.length < 1){
				System.out.println("Cannot read from standard i/o....");
				System.out.println("Please input file name....");
				return;
			}else if (args.length == 1){
				try{
					MyParser tokeniser = new MyParser(new java.io.FileInputStream(args[0]));
					System.out.println("AST_TREE");
					SimpleNode root = tokeniser.Prog(); //First node. Parse SS and store in "root".
					root.dump("");
					System.out.println("END AST_TREE");

					System.out.println("\nSYMBOL_TABLE");
					STC.output(true, true, true);
					System.out.println("END SYMBOL_TABLE");
		
					System.out.println("...beginning semantic analysis");
					SemanticAnalyser semanticAnalyser = new SemanticAnalyser();
     				        root.jjtAccept(semanticAnalyser, STC);

					System.out.println("Result in progress");
					System.out.println("...beginning IR code generation");
					System.out.println("Result to be determiend");
					
				//	PrintVisitor pv = new PrintVisitor();
			        //	root.jjtAccept(pv, null);
					
				//	TypeCheckVisitor tc = new TypeCheckVisitor();
				//	root.jjtAccept(tc, ST); //Symbol table being used with type table
// TODO Suceess message here? 		System.out.println("Success.");

				} 
				catch (java.io.FileNotFoundException e) {
					System.err.println("File " + args[0] + " not found.");
					return;
				}
				catch(ParseException e) {
					System.out.println(e.getMessage());
					System.out.println("MyParser: Failure");
					System.out.println("MyParser: Encountered errors during parse");
				}
			}
		}
	}
PARSER_END(MyParser) 

/* 
 ___________________________
|                           |
|      SECTION THREE        |
|     TOKEN-DEFINITONS      |
|___________________________|

*/

TOKEN_MGR_DECLS: {
	static int commentNesting = 0;
}

SKIP : /* COMMENTS */ {
	"/*" { commentNesting++; } : IN_COMMENT
     | < SINGLE_COMMENT:  "//" (~["\n"])+ >  
}

<IN_COMMENT> SKIP : {
	"/*" { commentNesting++; }
     |  "*/" { commentNesting--;
		if (commentNesting == 0){
			SwitchTo(DEFAULT);
		}
	     }
     | <~[]>
}

TOKEN : /*---RESERVED WORDS---*/ {
	< MAIN : "main" >
      | < BEGIN : "begin" >
      | < END : "end" >
      | < RETURN : "return" >
      | < IF : "if" >
      | < WHILE : "while" >
      | < ELSE : "else" >
      | < DECL_VARIABLE : "variable" >
      | < DECL_INTEGER : "integer" >
      | < DECL_CONSTANT : "constant" >
      | < VOID : "void" >
      | < IS : "is" >
      | < DO_SKIP : "skip" >
      | < IS_TRUE : "true" >
      | < IS_FALSE : "false" >
      | < BOOLEAN : "boolean" >
      /*| < : "" >*/
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

TOKEN : /*---TOKENS---*/ {	
	< COMMA : "," >
      | < SEMICOLUMN : ";" >	
      | < COLUMN : ":" >	
      | < IS_VALUE: ":=" >	
      | < OPEN_BRACKET : "(" >	
      | < CLOSE_BRACKET : ")" >	
      | < PLUS_SIGN : "+" >	
      | < MINUS_SIGN : "-" >	
      | < TILDA : "~" >	
      | < OR_SIGN : "|" >	
      | < AND_SIGN : "&" >	
      | < EQUALS_SIGN : "=" >	
      | < NEGATION_EQUALS : "!=" >	
      | < LESS_THAN: "<" >	
      | < EQUAL_LESS_THAN : "<=" >	
      | < GREATER_THAN : ">" >	
      | < EQUAL_GREATER_THAN: ">=" >	

}

TOKEN : /*---IDENTIFIERS---*/ {
        < INTEGER : "0" | ("-")? (["1" - "9"])(["0" - "9"])*>
	| < #DIGIT : ["0" - "9"] >
	| < ID : <LETTER>("_"|<LETTER>|<DIGIT>)*>
	| < #LETTER : ["a" - "z", "A" - "Z"] >
}
/* 
 ___________________________
|                           |
|	SECTION FOUR        |
|       GRAMMAR RULES       |
|___________________________|
*/

SimpleNode Prog() #Prog_Start :   
{}
{
	decl_list() func_list() main() <EOF> {return jjtThis;} 
}

void decl_list() #void :
{}
{
	( decl() <SEMICOLUMN> decl_list() )?
}

void decl() #void : //Can skip this
{}
{
	var_decl() 
	| const_decl()
}

void var_decl() #variable_decl : {String id; String type;} 
{
	<DECL_VARIABLE> //Do we need a Token t here? 
	id = identifier(false) 
        <COLUMN> 
        type = type()
	{
		STC.enter(id, type, "var");
	}
}
	
void const_decl() #constant_decl : {String id; String type;}
{
	<DECL_CONSTANT> 
	id = identifier(false) 
        <COLUMN> 
        type = type() 
        <IS_VALUE> expression()
	{
		STC.enter(id, type, "const");
	}
}

String type() #VAL_TYPE : {Token t; String id;}
{
	t = <DECL_INTEGER> {jjtThis.value = t.image; return t.image;} 
	| t = <BOOLEAN> {jjtThis.value = t.image; return t.image;} 
	| t = <VOID> {jjtThis.value = t.image; return t.image;}
}

void func_list() #void : {}
{
	(function() func_list())?	
}

void function() #Function: {String type; String id;}
{
	type = type() 
        id = identifier(false) 
	{
		STC.enter(id, type, "function");
		STC.increaseScope(id); //entering function scope
	
	}
        <OPEN_BRACKET> parameter_list(id) #PARAM_LIST(>0) <CLOSE_BRACKET> <IS> decl_list() #DECL_LIST(>0) <BEGIN> statement_block() #FUNCTION_CODE(>0) <RETURN> <OPEN_BRACKET> (expression())? #RETURNS(>0) 
	{
		STC.decreaseScope(); 
		//Come out of function scope
	}
	<CLOSE_BRACKET> <SEMICOLUMN><END>
	

}

void parameter_list(String function_name) #void : {}
{
	(nemp_parameter_list(function_name))?
}

void nemp_parameter_list(String function_name) #void :  {String id; String type;}
{
	id = identifier(false) 
	<COLUMN> 
	type = type() 
	{
		STC.enter(id, type, function_name + "_param");
	}
	#Parameter(2) (<COMMA> nemp_parameter_list(function_name))? 
}

void main() #MAIN() : {}
{
	<MAIN> <BEGIN>
	{
		STC.increaseScope("main");
	}
        decl_list() #MAIN_DECLS(>0) statement_block() #MAIN_CODE(>0) 
	{
		STC.decreaseScope();
	}
	<END>
}

void statement_block() #void:  {}
{
	(statement() statement_block() )?
}

void statement() #void : {Token t;}
{
	identifier(false) 
	(//BEGIN OR
		 <IS_VALUE> expression() #ASSIGN_OP(2) 
		| <OPEN_BRACKET> arg_list() <CLOSE_BRACKET> 
	)//END OR
        <SEMICOLUMN>  
	| <BEGIN> statement_block() <END> #void
	| <IF> condition() #IF_CONDITION(>0) <BEGIN> 
	{
		STC.increaseScope("if_statement*" + Integer.toString(ifID));
		ifID++; 
	}
	statement_block() #IF_CODE(>0) 
	{
		STC.decreaseScope();
	}
	<END> #IF(2)
	| <ELSE> <BEGIN> statement_block()
	{
		STC.increaseScope("else_statement*"+Integer.toString(ifID-1)+"*"+elseID);
		elseID++;
	}
	 #ELSE_CODE(>0) 
	{
		STC.decreaseScope();
	}
	<END> #ELSE(1)
	| <WHILE> condition() #WHILE_CONDITION(>0) <BEGIN> 
	{
		STC.increaseScope("while_statement*" + Integer.toString(whileID));
		whileID++;
	}
	statement_block() #WHILE_CODE(>0)
	{
		STC.decreaseScope();
	}
	<END> #WHILE(2) 
	| <DO_SKIP> <SEMICOLUMN> #SKIP //TODO what is the purpose of skip? How relevant to semantics?
}

void expression() #void: {}
{
	 (
                (
                        integer() | is_true() | is_false()
                )
		
                (//START OR (NEXT TOKEN = PLUS | MINUS )
			(
				(
					(
						<PLUS_SIGN> 
		                        	(
							(
				                                (
								minus_identifier()
							        | identifier(false)
								)
								(<OPEN_BRACKET> arg_list() <CLOSE_BRACKET>)?| integer() | is_true() | is_false()
			                       		)
						| 
							<OPEN_BRACKET> expression() <CLOSE_BRACKET>
						)
			                ) 
					#PLUS_OP(2) 
				)
			)
			|
			(
				(
					(
						<MINUS_SIGN>
			                        (
							(
			        	                        (
								minus_identifier()
								| identifier(false)
								)

	(<OPEN_BRACKET> arg_list() <CLOSE_BRACKET>)?| integer() | is_true() | is_false()
				                        )
						| 
							<OPEN_BRACKET> expression() <CLOSE_BRACKET>
						)
					)
					#SUBTRACT_OP(2)
		                )
			)
		)*
        )
	|    minus_identifier() 
	   | identifier(false) 
	   ( 
		(//start OR 
			(
				<OPEN_BRACKET> arg_list() <CLOSE_BRACKET>
			) 
			| 
			( 
				integer() | is_true() | is_false() 
				)? 
				(
				  (
					<MINUS_SIGN> 
					(
						( 
						/*TODO negation?*/   minus_identifier() | identifier(false) (<OPEN_BRACKET> arg_list() <CLOSE_BRACKET>)? | integer() | is_true() | is_false() 
						) 
						| <OPEN_BRACKET> expression() <CLOSE_BRACKET>
					)
				  )#SUBTRACT_OP(2)
				  |
				  (
					<PLUS_SIGN>
					(
						( 
							/*TODO negation?*/	(minus_identifier() | identifier(false) )(<OPEN_BRACKET> arg_list() <CLOSE_BRACKET>)? | integer() | is_true() | is_false() 
						) 
						| <OPEN_BRACKET> expression() <CLOSE_BRACKET>
						)
				  )#PLUS_OP(2)
				)+ //TODO double check the + instead of * 
			) 
		 )? 
	| <OPEN_BRACKET> expression() <CLOSE_BRACKET> 
}

void binary_arith_op() #void : {} //TODO string - string valid?
{
        <PLUS_SIGN> #PLUS_OP(2) 
        | <MINUS_SIGN> #SUBTRACT_OP(2)
}    

void condition() #void: {}
{
        (//BEGIN OR
                ( 
                        <TILDA> condition() #NEGATION(>0)
                )
                |
                LOOKAHEAD(3)(
                        <OPEN_BRACKET> /*--going to cause conflict with expression last choice if no lookahead--*/ condition() <CLOSE_BRACKET>
                )
                |
                (//re-write of comp_op 
			expression()
                        (//BEGIN OR

				<EQUALS_SIGN> expression() #EQUAL(2)
				| <NEGATION_EQUALS> expression() #NOT_EQUAL(2)
				| <LESS_THAN> expression() #LESS_THAN(2)
				| <EQUAL_LESS_THAN> expression() #EQ_LESS_THAN(2)
				| <GREATER_THAN> expression() #GREATER_THAN(2)
				| <EQUAL_GREATER_THAN> expression() #EQ_GREATER_THAN(2)
			)//END OR
                ) 
        )//END OR
        (
                LOOKAHEAD(2)(//BEGIN OR
		 	<OR_SIGN> condition() #OR(2) 
			| <AND_SIGN> condition() #AND(2)
		) 
        )? 
}

void arg_list() #void : {}
{
	(nemp_arg_list())?
}

void nemp_arg_list() #ARG_LIST : {}
{
	 (identifier(false) (<COMMA> identifier(false))* ) 
}

String identifier(Boolean isMinus) #ID: {Token t;}
{
	t = <ID> {
		String image = t.image;
		if (isMinus)
			image = "-" + t.image;
		jjtThis.value = image; 
		return image;
	} //generated non-terminal ID  
}

String integer() #INT: {Token t;} 
{
	t = <INTEGER> {jjtThis.value = t.image; return t.image;} //generated non-terminal ID  
}

String is_true() #IS_TRUE: {Token t;}
{
	t = <IS_TRUE> {jjtThis.value = t.image; return t.image;} //generated non-terminal ID  
}

String is_false() #IS_FALSE: {Token t;}
{
	t = <IS_FALSE> {jjtThis.value = t.image; return t.image;} //generated non-terminal ID  
}

void minus_identifier() #void: {Token t;}
{
	t = <MINUS_SIGN> identifier(true) {}  //generated non-terminal ID
} 
