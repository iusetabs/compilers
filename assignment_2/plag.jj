/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. plag.jj */
/*@egen*//*ASSIGNMENT 2*/

/* 
 ___________________________
|                           |
|	SECTION ONE         |
|    	  OPTIONS           |
|___________________________|

*/

options { 
	  JAVA_UNICODE_ESCAPE = true;
	  IGNORE_CASE = true;
	               
                         
	}
/* 
 ___________________________
|                           |
|	SECTION TWO         |
|    	 USER-CODE          |
|___________________________|

*/
PARSER_BEGIN(MyParser)

	//required imports
	import java.io.*;
	import java.util.*;

	public class MyParser/*@bgen(jjtree)*/implements MyParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMyParserState jjtree = new JJTMyParserState();

/*@egen*/

		public static Hashtable ST = new Hashtable(); 

		public static void main (String [] args) throws ParseException, FileNotFoundException { 
			String t1; 
			//STC t2;


			if ( args.length < 1){
				System.out.println("Cannot read from standard i/o....");
				System.out.println("Please input file name....");
				return;
			}else if (args.length == 1){
				try{
					MyParser tokeniser = new MyParser(new java.io.FileInputStream(args[0]));
					SimpleNode root = tokeniser.Prog(); //First node. Parse SS and store in "root".
					root.dump("");
					
				//	PrintVisitor pv = new PrintVisitor();
			        //	root.jjtAccept(pv, null);
					
				//	TypeCheckVisitor tc = new TypeCheckVisitor();
				//	root.jjtAccept(tc, ST); //Symbol table being used with type table
// TODO Suceess message here? 		System.out.println("Success.");

				} 
				catch (java.io.FileNotFoundException e) {
					System.err.println("File " + args[0] + " not found.");
					return;
				}
				catch(ParseException e) {
					System.out.println(e.getMessage());
					System.out.println("MyParser: Failure");
					System.out.println("MyParser: Encountered errors during parse");
				}
			}
		}
	}
PARSER_END(MyParser) 

/* 
 ___________________________
|                           |
|      SECTION THREE        |
|     TOKEN-DEFINITONS      |
|___________________________|

*/

TOKEN_MGR_DECLS: {
	static int commentNesting = 0;
}

SKIP : /* COMMENTS */ {
	"/*" { commentNesting++;
	       System.out.println("Comment"); } : IN_COMMENT
     | < SINGLE_COMMENT:  "//" (~["\n"])+ >  { System.out.println("One line comment found"); }
}

<IN_COMMENT> SKIP : {
	"/*" { commentNesting++; }
     |  "*/" { commentNesting--;
		if (commentNesting == 0){
			System.out.println("Comments closed");
			SwitchTo(DEFAULT);
		}
		else{
			System.out.println("Comments not shut yet");
			System.out.println("Comments left: " + Integer.toString(commentNesting));
		}
	     }
     | <~[]>
}

TOKEN : /*---RESERVED WORDS---*/ {
	< MAIN : "main" >
      | < BEGIN : "begin" >
      | < END : "end" >
      | < RETURN : "return" >
      | < IF : "if" >
      | < WHILE : "while" >
      | < ELSE : "else" >
      | < DECL_VARIABLE : "variable" >
      | < DECL_INTEGER : "integer" >
      | < DECL_CONSTANT : "constant" >
      | < VOID : "void" >
      | < IS : "is" >
      | < DO_SKIP : "skip" >
      | < IS_TRUE : "true" >
      | < IS_FALSE : "false" >
      | < BOOLEAN : "boolean" >
      /*| < : "" >*/
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

TOKEN : /*---TOKENS---*/ {	
	< COMMA : "," >
      | < SEMICOLUMN : ";" >	
      | < COLUMN : ":" >	
      | < IS_VALUE: ":=" >	
      | < OPEN_BRACKET : "(" >	
      | < CLOSE_BRACKET : ")" >	
      | < PLUS_SIGN : "+" >	
      | < MINUS_SIGN : "-" >	
      | < TILDA : "~" >	
      | < OR_SIGN : "|" >	
      | < AND_SIGN : "&" >	
      | < EQUALS_SIGN : "=" >	
      | < NEGATION_EQUALS : "!=" >	
      | < LESS_THAN: "<" >	
      | < EQUAL_LESS_THAN : "<=" >	
      | < GREATER_THAN : ">" >	
      | < EQUAL_GREATER_THAN: ">=" >	

}

TOKEN : /*---IDENTIFIERS---*/ {
        < INTEGER : "0" | ("-")? (["1" - "9"])(["0" - "9"])*>
	| < #DIGIT : ["0" - "9"] >
	| < ID : <LETTER>("_"|<LETTER>|<DIGIT>)*>
	| < #LETTER : ["a" - "z", "A" - "Z"] >
}
/* 
 ___________________________
|                           |
|	SECTION FOUR        |
|       GRAMMAR RULES       |
|___________________________|
*/
SimpleNode Prog()       : {/*@bgen(jjtree) Prog */
  ASTProg jjtn000 = new ASTProg(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Prog */
    try {
/*@egen*/
    DeclList()
    FuncList()
    Main() <EOF>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DeclList() : {/*@bgen(jjtree) DeclList */
  ASTDeclList jjtn000 = new ASTDeclList(JJTDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclList */
    try {
/*@egen*/
    Decl() <SEMIC> DeclList()
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Decl() : {/*@bgen(jjtree) Decl */
  ASTDecl jjtn000 = new ASTDecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Decl */
    try {
/*@egen*/
    VarDecl()
  | ConstDecl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDecl()          : {/*@bgen(jjtree) VarDecl */
                           ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) VarDecl */
    try {
/*@egen*/
    t = <VAR> id = Identifier() <COLON> type = Type()/*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                      }
/*@egen*/ { st.put(id, type, "var", scope); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ConstDecl()            : {/*@bgen(jjtree) ConstDecl */
                               ASTConstDecl jjtn000 = new ASTConstDecl(JJTCONSTDECL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) ConstDecl */
    try {
/*@egen*/
    t = <CONST> id = Identifier() <COLON> type = Type() ConstAssign()/*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                      }
/*@egen*/ { st.put(id, type, "const", scope); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ConstAssign() : {/*@bgen(jjtree) ConstAssign */
                      ASTConstAssign jjtn000 = new ASTConstAssign(JJTCONSTASSIGN);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ConstAssign */
    try {
/*@egen*/
    t = <ASSIGN> Expr()/*@bgen(jjtree) #ConstAssign(> 1) */
                        {
                          ASTConstAssign jjtn001 = new ASTConstAssign(JJTCONSTASSIGN);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                          jjtc001 = false;
                        }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                          }
                        }
/*@egen*/                 /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FuncList() : {/*@bgen(jjtree) FuncList */
  ASTFuncList jjtn000 = new ASTFuncList(JJTFUNCLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncList */
    try {
/*@egen*/
    [Func() FuncList()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Func()       : {/*@bgen(jjtree) Func */
                     ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/String id; String type;}
{/*@bgen(jjtree) Func */
    try {
/*@egen*/
    type = Type() id = Identifier() {st.put(id, type, "function", scope); scope = id;} <LPAREN> ParamList() <RPAREN> <LBRACE>
    DeclList()
    StmBlk()
    <RETURN> <LPAREN> [Expr()] <RPAREN>/*@bgen(jjtree) #FuncRet(> 1) */
                                        {
                                          ASTFuncRet jjtn001 = new ASTFuncRet(JJTFUNCRET);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                          }
                                        }
/*@egen*/             
    <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Type()       : {/*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  ( t = <INT> 
  | t = <BOOL>
  | t = <VOID>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.value = t.image; return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ParamList()            : {/*@bgen(jjtree) ParamList */
  ASTParamList jjtn000 = new ASTParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParamList */
    try {
/*@egen*/
    NempParamList() NempParamListPrime()
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NempParamList()                : {/*@bgen(jjtree) NempParamList */
                                       ASTNempParamList jjtn000 = new ASTNempParamList(JJTNEMPPARAMLIST);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/String id; String type;}
{/*@bgen(jjtree) NempParamList */
    try {
/*@egen*/
    id = Identifier() <COLON> type = Type()/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ { st.put(id, type, "function parameter", scope); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NempParamListPrime() : {/*@bgen(jjtree) NempParamListPrime */
  ASTNempParamListPrime jjtn000 = new ASTNempParamListPrime(JJTNEMPPARAMLISTPRIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NempParamListPrime */
    try {
/*@egen*/
    [<COMMA> NempParamList()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Main()       : {/*@bgen(jjtree) Main */
                     ASTMain jjtn000 = new ASTMain(JJTMAIN);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    {scope = "main";} t = <MAIN> <LBRACE> DeclList() StmBlk() <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StmBlk() : {/*@bgen(jjtree) StmBlk */
  ASTStmBlk jjtn000 = new ASTStmBlk(JJTSTMBLK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StmBlk */
    try {
/*@egen*/
    Stm() StmBlk()
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stm() : {/*@bgen(jjtree) Stm */
              ASTStm jjtn000 = new ASTStm(JJTSTM);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Stm */
    try {
/*@egen*//*@bgen(jjtree) #Assign( 2) */
    {
      ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Identifier() ((t = <ASSIGN> Expr() <SEMIC>/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                }
/*@egen*/ {jjtn001.value = t.image;}) | (<LPAREN> ArgList() <RPAREN> <SEMIC>/*@bgen(jjtree)*/
                                                                                                                   {
                                                                                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                                                                                     jjtc001 = false;
                                                                                                                   }
/*@egen*/ {jjtn001.value = "procCall";})))/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/           
  | (<LBRACE> StmBlk() <LBRACE>)
  |/*@bgen(jjtree) Stm */
    {
      ASTStm jjtn002 = new ASTStm(JJTSTM);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (t = <IF> Cond() <LBRACE> StmBlk() <RBRACE> <ELSE> <LBRACE> StmBlk() <RBRACE>/*@bgen(jjtree)*/
                                                                                  {
                                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                                    jjtc002 = false;
                                                                                  }
/*@egen*/ {jjtn002.value = t.image;})/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/     
  |/*@bgen(jjtree) Stm */
    {
      ASTStm jjtn003 = new ASTStm(JJTSTM);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ (t = <WHILE> Cond() <LBRACE> StmBlk() <RBRACE>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn003, true);
                                                     jjtc003 = false;
                                                   }
/*@egen*/ {jjtn003.value = t.image;})/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/     
  | (<SKP> <SEMIC>)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr() : {/*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
    try {
/*@egen*/
    (Frag() Term())
  | (<LPAREN> Expr() <RPAREN> Term())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Term() : {/*@bgen(jjtree) Term */
               ASTTerm jjtn000 = new ASTTerm(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Term */
    try {
/*@egen*/
    t = <PLUS> Expr()/*@bgen(jjtree) #PlusOp( 2) */
                      {
                        ASTPlusOp jjtn001 = new ASTPlusOp(JJTPLUSOP);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001,  2);
                        jjtc001 = false;
                      }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/           
  | t = <MINUS> Expr()/*@bgen(jjtree) #MinOp( 2) */
                       {
                         ASTMinOp jjtn002 = new ASTMinOp(JJTMINOP);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn002,  2);
                         jjtc002 = false;
                       }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                         }
                       }
/*@egen*/          
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Frag() : {/*@bgen(jjtree) Frag */
  ASTFrag jjtn000 = new ASTFrag(JJTFRAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Frag */
    try {
/*@egen*/
    (Identifier() [<LPAREN> ArgList() <RPAREN>])
  | (<MINUS> Identifier())
  | Num()
  | Bool()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Num()      : {/*@bgen(jjtree) Num */
                   ASTNum jjtn000 = new ASTNum(JJTNUM);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Num */
    try {
/*@egen*/
    t = <NUMBER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Bool()       : {/*@bgen(jjtree) Bool */
                     ASTBool jjtn000 = new ASTBool(JJTBOOL);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Bool */
    try {
/*@egen*/
    (t = <TRUE> | t = <FALSE>)/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Cond() : {/*@bgen(jjtree) Cond */
  ASTCond jjtn000 = new ASTCond(JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Cond */
    try {
/*@egen*/
    (<NEGATE> Cond() CondPrime())
  | LOOKAHEAD(3) (<LPAREN> Cond() <RPAREN> CondPrime())
  | (Expr() CompOp() CondPrime())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CondPrime() : {/*@bgen(jjtree) CondPrime */
                    ASTCondPrime jjtn000 = new ASTCondPrime(JJTCONDPRIME);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CondPrime */
    try {
/*@egen*/
    t = <OR> Cond()/*@bgen(jjtree) #OrOp( 2) */
                    {
                      ASTOrOp jjtn001 = new ASTOrOp(JJTOROP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
                    }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/         
  | t = <AND> Cond()/*@bgen(jjtree) #AndOp( 2) */
                     {
                       ASTAndOp jjtn002 = new ASTAndOp(JJTANDOP);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtc002 = false;
                     }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
                     }
/*@egen*/           
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CompOp() : {/*@bgen(jjtree) CompOp */
                 ASTCompOp jjtn000 = new ASTCompOp(JJTCOMPOP);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CompOp */
    try {
/*@egen*/
    t = <EQ> Expr()/*@bgen(jjtree) #EqOp( 2) */
                    {
                      ASTEqOp jjtn001 = new ASTEqOp(JJTEQOP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
                    }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/         
  | t = <NOT_EQ> Expr()/*@bgen(jjtree) #NotOp( 2) */
                        {
                          ASTNotOp jjtn002 = new ASTNotOp(JJTNOTOP);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002,  2);
                          jjtc002 = false;
                        }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
                        }
/*@egen*/          
  | t = <LT> Expr()/*@bgen(jjtree) #LtOp( 2) */
                    {
                      ASTLtOp jjtn003 = new ASTLtOp(JJTLTOP);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn003,  2);
                      jjtc003 = false;
                    }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003,  2);
                      }
                    }
/*@egen*/         
  | t = <LT_EQ> Expr()/*@bgen(jjtree) #LtEqOp( 2) */
                       {
                         ASTLtEqOp jjtn004 = new ASTLtEqOp(JJTLTEQOP);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn004,  2);
                         jjtc004 = false;
                       }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004,  2);
                         }
                       }
/*@egen*/           
  | t = <GT> Expr()/*@bgen(jjtree) #GtOp( 2) */
                    {
                      ASTGtOp jjtn005 = new ASTGtOp(JJTGTOP);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn005,  2);
                      jjtc005 = false;
                    }
/*@egen*/ {jjtn005.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005,  2);
                      }
                    }
/*@egen*/         
  | t = <GT_EQ> Expr()/*@bgen(jjtree) #GtEqOp( 2) */
                       {
                         ASTGtEqOp jjtn006 = new ASTGtEqOp(JJTGTEQOP);
                         boolean jjtc006 = true;
                         jjtree.openNodeScope(jjtn006);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn006,  2);
                         jjtc006 = false;
                       }
/*@egen*/ {jjtn006.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc006) {
                           jjtree.closeNodeScope(jjtn006,  2);
                         }
                       }
/*@egen*/           /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArgList() : {/*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
    try {
/*@egen*/
    [NempArgList()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NempArgList() : {/*@bgen(jjtree) NempArgList */
  ASTNempArgList jjtn000 = new ASTNempArgList(JJTNEMPARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NempArgList */
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree) #ArgList(> 1) */
                 {
                   ASTArgList jjtn001 = new ASTArgList(JJTARGLIST);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ [<COMMA> NempArgList()]/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                   }
                 }
/*@egen*/             /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Identifier()             : {/*@bgen(jjtree) identifier */
                                   ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
    try {
/*@egen*/
    t = <ID>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
